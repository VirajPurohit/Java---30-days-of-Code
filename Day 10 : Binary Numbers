import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    
     static int[] binaryConv (int n){
        
         int power = (int)(Math.log(n)/Math.log(2));
         int [] binnum = new int [power+1];
         binnum[power] = 1;
         int num =(int) Math.pow(2,power);
         int diff = n - num;
         
         while(diff!=0 ){
             power = (int)(Math.log(diff)/Math.log(2));
             binnum[power] = 1;
             num = (int) Math.pow(2,power);
             diff = diff - num;
             
         }
         
         return binnum;
     }
     
     static int consecOnes(int[] arr){
         int finalcount = 0;
         int tempcount = 0;
         
         for(int i=0 ; i< arr.length-1; i++){
             if(arr[i]==1 && finalcount==0)
                finalcount = finalcount +1;
            
            if(arr[i]==1 && ((arr[i]&arr[i+1])==1 ? true : false)){
                tempcount = tempcount + 1;
                if(tempcount+1 >finalcount)
                    finalcount = tempcount +1;
            }
        
            else if(arr[i]== 0) {
                tempcount = 0; 
            }
             
         }
         
         return finalcount;
         
         }



    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        scanner.close();
        
        int[] binnumber = binaryConv(n);
        
        System.out.println(consecOnes(binnumber));
        
    
    }
}

